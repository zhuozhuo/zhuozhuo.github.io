<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[iMCOBandSupport]]></title>
      <url>%2F2017%2F03%2F08%2FiMCOBandSupport_CN%2F</url>
      <content type="text"><![CDATA[此为介绍iMCO产品的佩戴和使用方式，以及如何和移动端设备连接操作介绍，请仔细阅读。 中文CoBand K4 CoBand DBL部件介绍 正确佩戴 手环以尺骨茎突后佩戴最佳； 根据调节孔调好适合手腕的大小； 扣上腕带扣； 传感器要紧贴皮肤,避免移动。 给手环充电 初次使用确保手环电量正常,若低电不能正常开机,请连接充电器对设备进行充电,手环会自动开机。 充电方式: 将手环主体从腕带内侧取出(往下面正常取出）; 插入充电器对应的部位; 另一端连接标准USB接口,即可进行充电。 开始使用手环 开/关机 在设备关机状态下,长触摸功能键5秒以上可使设备震动开机。 在设备开机状态下,长触摸功能键5秒以上可进入关机界面,短触摸选择OFF后,再次长按触摸键5秒关机。 手环操作 在设备开机状态下短触摸功能键可点亮屏幕或切换显示; 无操作默认五秒息屏,用户可连接手机后修改息屏时间； 心率界面长触摸功能键开始测试心率,其他页面长触摸进入开/关机选项。 设备连接注释：首次使用需连接APP进行校准，连接成功后手环会自动同步时间，否则计步和睡眠数据不准。 打开手机APP → 我的设备(苹果手机）→ 搜索设备(Android手机）→ 往下拉扫描设备→ 点击设备连接 配对成功后,会自动保存手环蓝牙地址,打开或在后台运行,都会自动搜索并连接手环.运动、睡眠、心率数据会自动同步手环可存储7天的离线数据，数据量越多，同步时间越长，最长大约1分钟。 APP功能及设定个人信息和运动目标进入智能爱魔客?APP后请先设定个人信息账户→个人信息可设置头像-性别-年龄-身高-体重个人信息可提高数据的精准度，定制个人每天的运动目标，合理的运动规划，有助于身体素质的提高。 提醒功能注释：提醒功能需要在APP端设置中心开启提醒开关,并保持手机与手环在蓝牙连接成功的状态,来消息时震动+文字推送提醒。 来电提醒： 连接状态下，如果开启了来电提醒功能，当来电时，手环上会震动，并显示来电的姓名或号码。（如果来电方名字在手机通讯录中已保存有，则显示姓名，否则显示号码） 短信提醒： 联系人的短信显示姓名及内容，陌生人的短信显示号码及内容。 QQ提醒： 连接状态下，如果开启了QQ提醒功能，当有QQ信息到来时，手环上会震动，并显示QQ图标及QQ内容提醒。 微信提醒：连接状态下如果开启了微信提醒功能，当有微信信息到来时，手环上会震动并显示微信图标及微信内容提醒。 智能闹钟：连接状态下可进行三个闹钟的设置，设置后会同步给手环；智能闹钟是一种无声闹钟，闹铃时手环会发起适度的震动，不会惊吓到用户，支持离线闹钟提醒。 久坐提醒：设置是否开启久坐提醒功能和提醒时间间隔，默认时间间隔一个小时；连接状态下，开启后，如果用户一个小时内都没进行运动，手环将会发出震动及久坐图标提醒用户进行运动。 注释：Android用户温馨提示:使用提醒功能时需要设置为允许“爱魔客”后台运行；建议在权限管理中添加“爱魔客”为信任。 其他功能 更多APP提醒： 可添加更多APP提醒，目前只支持部分机型。 智能防丢： 连接状态下,手机超出一定范围会发出警报。 查找手环： 连接状态下，点击“查找手环”选项，手环会发出震动。 摇一摇拍照： 进入摇摇拍照界面,连接状态下, 用户摇一摇手环即可进行倒计时3秒后拍照。 固件升级： 用于检测手环固件是否有新版本;升级过程中，保证蓝牙连接状态下,大约需2-3分钟升级完成，期间避免蓝牙设备断开。 恢复出厂设置： 手环和APP的数据会全部被清零，并重启手环APP。联系我们 天猫旗舰店 京东旗舰店 微信公众号: imcosh 客服电话: 400-078-3003 邮箱: &#x66;&#x75;&#x77;&#117;&#64;&#x61;&#105;&#109;&#x6f;&#x6b;&#x65;&#46;&#x63;&#99; EnglishCoBand K4 CoBand DBLComponent Description How to wearIt’s better to wear the band behind stylion ulna, and adjust the length of watch band according to your wrist, the sensor should be close to skin, avoiding moving. How to Use On/Off In the shutdown state, long touch the function key over 5s to start up the device with vibration. In the state of power-on, long touch the function key over 5s to enter into shutdown interface and long touch again to shut down the device after choosing OFF. Operation Shortly touch the function key can light up the screen or switch display page under the state of power-on. No operation in 5s will turn off screen by default,users are supported to modify the time by connecting phone’s APP. In Heart Rate interface, long touch the function key can start test. In the other interfaces, long touch will show ON/OFF options. Band ChargingPlease make sure the battery level is normal at first time. Low battery will cause shutdown and you need to charge the band for automatic power-on. How to charge take off Band’s host part from the back wrist strap . insert the host part into corresponding charging slot. plug in the USB on the other side to charge. How to ConnectThe first time to use please connect the App to calibrate,aftersuccessfully connected, the watch band will sync the timeautomatically, otherwise the steps counting and sleeping datawill not accurate. Open APP Click Settings Icon → My Device（iOS）/ Search Device(Android) → Pull-down to Scan Device → Click to Connect When band connects the phone successfully, APP will automaticallysave Bluetooth address. Once opened, APP will automatically searchand connectband. The data of Sports, Sleep and Heart Rate on theband will automatically sync with the iMCO app. Seven days offlinedata is saved,the more the data is the longer it takes to sync maximumnearly 1minutes. “Sync finished” will be shown,after syncing done. Main APP Features and SettingsPersonal information and Exercise GoalPlease set personal information after entering APPProfile→Personal Settings.Editing your portrait, gender, age,height andweight included to increase data accuracy.Plan a daily exercise goal and a feasible planlinks to a sound body. NotificationsThis feature will be workable under: Notifications enabled in Settings; The band and phone APP keep connecting successfully. The band will vibrate reminder once got messages. Incoming Call:Vibrate and name or number displayed (Display name only if it’s in your contacts,display number otherwise.) Message:Vibrate reminder with name from Contacts or number if unknown. AlarmClock:Up to 3 alarms with user-friendly vibration. Support offline Clock alarming. Sedentary:One hour default interval. Notified with vibration after sitting more than interval. Warn tips for Android users:Allow iMCO running in backstage when uses Notifications andadd it to trust one in your privilege management. Other FeaturesMore APP NotificationsAdd more APP notifications in Settings, which support partial mobile phones only. Anti-lostThe connected state, the phone will alert when the band is away from the 、phone. For Android users, must allow “iMCO”s floating window display when use the function. Find BandClick “Find band”, band will vibrate when connected with phone . Shake and PhotographOn Shake and Photograph interface, user can shake the hand which wear the band to take a picture after 3 seconds prompt. Firmware UpgradeDetecting new version;Upgrade must be Bluetooth-connected;Upgrade takes 2~3 minutes and avoid disconnecting with Bluetooth. Factory ResetDelete data from band and APP, then APP rebooted. Contact us Customer telephone：400-078-3003 Email: &#x66;&#117;&#x77;&#117;&#x40;&#x61;&#x69;&#109;&#111;&#x6b;&#101;&#x2e;&#x63;&#x63;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[ZHBLE-Bluetooth的封装库]]></title>
      <url>%2F2016%2F08%2F10%2FZHBLE-Bluetooth%E7%9A%84%E5%B0%81%E8%A3%85%E5%BA%93%2F</url>
      <content type="text"><![CDATA[ZHBLE 使用Block回调方式，旨在使调用系统CoreBluetooth库简单明了. ##Features 基于原生CoreBluetooth,回调函数全部封装成Block方式，使调用相关函数简洁明了。 设备作为Central端和Peripheral端都有封装。 采用工厂模式和Block结合使得初始化和函数调用更容易。 ##Introduce类名 | 作用及用法—– | —–ZHBLECentral | 设备作为Central端的相关属性和操作例如:初始化Central,扫描,连接,检索设备等。ZHBLEPeripheral | 对Peripheral端的相关操作例如:发现服务和特征,监听，读写等操作。ZHBLEPeripheralManager | 设备作为Peripheral端时的相关操作例如:CBPeripheralManager的初始化,广播,添加服务，发送数据等。ZHBLEStoredPeripherals | 设备本地缓存相关操作ZHBLEManager | 快捷访问最近连接的设备ZHBLEBlocks | 所有Block定义 UsageCocoaPods (recommended)pod ‘ZHBLE’, ‘~&gt; 0.1.5’ Central123456789101112131415161718192021#import &quot;ZHBLE.h&quot;self.central = [ZHBLECentral sharedZHBLECentral];//扫描[self.central scanPeripheralWithServices:uuids options:@&#123;CBCentralManagerScanOptionAllowDuplicatesKey: @(YES)&#125; onUpdated:^(ZHBLEPeripheral *peripheral,NSDictionary *data)&#123; if (peripheral) &#123; //Do Something &#125; &#125;];//连接[self.central connectPeripheral:peripheral options:nil onFinished:^(ZHBLEPeripheral *peripheral, NSError *error)&#123;&#125;onDisconnected:^(ZHBLEPeripheral *peripheral, NSError *error)&#123; &#125;); &#125;]; Peripheral12345678910111213141516171819#import &quot;ZHBLE.h&quot;self.peripheralManager = [ZHBLEPeripheralManager sharedZHBLEPeripheralManager];//广播 CBUUID *temUUID = [CBUUID UUIDWithString:@&quot;902DD287-69BE-4ADD-AACF-AA3C24D83B66&quot;]; NSArray *temUUIDArray = [NSArray arrayWithObjects:temUUID, nil]; NSDictionary *temServiceDic = @&#123;CBAdvertisementDataServiceUUIDsKey:temUUIDArray&#125;; [self.peripheralManager startAdvertising:temServiceDic onStarted:^(NSError *error)&#123; &#125;];//添加服务[self.peripheralManager addService:_transferService onFinish:^(CBService *service,NSError *error)&#123; &#125;];]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[一个免费的开源聊天UI组件ZHChat]]></title>
      <url>%2F2016%2F08%2F03%2F%E4%B8%80%E4%B8%AA%E5%85%8D%E8%B4%B9%E7%9A%84%E5%BC%80%E6%BA%90%E8%81%8A%E5%A4%A9UI%E7%BB%84%E4%BB%B6ZHChat%2F</url>
      <content type="text"><![CDATA[ZHChat is a free open source chat UI components, support for sending voice, pictures, words, expressions, location, video messages. ZHChat can help developers to quickly integrate IM service, easy chat, provides totally free licensing agreement, support for secondary development. Welcome to pull Request. ##Features Interface to imitate Apple with a messaging application interface. Contains text, pictures, voice, location, sends a video message features. Excludes chat interface is based on a UITableView, easier to understand the entire UI framework。 Design GoalsEasy integrated chat feature. Requirements iOS 7.0+ ARC UsageCocoaPods (recommended)pod ‘ZHChat’, ‘~&gt; 0.1.7’ Getting started guide for ZHChat 1#import &lt;ZHChat/ZHCMessages.h&gt; // import all the things Demo Project There’s a sweet demo project: ‘ZHChat.xcworkspace’ Run ‘pod install’ first Customizing The demo project is well-commented. Please use this as a guide. View Controller Subclass ZHCMessagesViewController. Implement the required methods in the ZHCMessagesTableViewDataSource protocol. Implement the required methods in the ZHCMessagesTableViewDelegate protocol. Implement the required methods in the ZHCMessagesMoreViewDelegate protocol. Implement the required methods in the ZHCMessagesMoreViewDataSource protocol. Implement the required methods in the ZHCEmojiViewDelegate protocol. Implement the required methods in the ZHCMessagesInputToolbarDelegate protocol. Set your senderId and senderDisplayName. These properties correspond to the methods found in ZHCMessageData and determine which messages are incoming or outgoing. Avatar Model Your avatar model objects should conform to the ZHCMessageBubbleImageDataSource protocol. However, you may use the provided ZHCMessagesAvatarImage class. Also see ZHCMessagesAvatarImageFactory for easily generating custom avatars. Message Bubble Model Your message bubble model objects should conform to the ZHCMessageAvatarImageDataSource protocol. However, you may use the provided ZHCMessagesAvatarImage class. Also see ZHCMessagesBubbleImageFactory and UIImage+ZHCMessages for easily generating custom bubbles. Message Model Your message model objects should conform to the ZHCMessageData protocol. However, you may use the provided ZHCMessage class. Media Attachment Model Your media attachment model objects should conform to the ZHCMessageMediaData protocol. However,you may use the provided classes: ZHCAudioMediaItem, ZHCLocationMediaItem, ZHCPhotoMediaItem. Creating your own custom media items is easy! Simply follow the pattern used by the built-in media types. Also see ZHCMessagesMediaPlaceholderView for masking your custom media views as message bubbles. More Module You can see ZHCMessagesMoreView . Implement the required methods in the ZHCMessagesMoreViewDelegate protocol. Implement the required methods in the ZHCMessagesMoreViewDataSource protocol. Audio Module You can see ZHCMessagesVoiceRecorder,ZHCMessagesAudioProgressHUD . ZHCMessagesAudioProgressHUD is a recording voice animation view. ZHCMessagesVoiceRecorder is recorder. It implement the required methods in the ZHCMessagesVoiceDelegate protocol. Emoji Module You can see ZHCMessagesEmojiView . Implement the required methods in the ZHCEmojiViewDelegate protocol. The emoji resource in ZHCEmojiList.plist.]]></content>
    </entry>

    
  
  
</search>
