<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[ZHBLE-Bluetooth的封装库]]></title>
      <url>%2F2016%2F08%2F10%2FZHBLE-Bluetooth%E7%9A%84%E5%B0%81%E8%A3%85%E5%BA%93%2F</url>
      <content type="text"><![CDATA[ZHBLE 使用Block回调方式，旨在使调用系统CoreBluetooth库简单明了. ##Features 基于原生CoreBluetooth,回调函数全部封装成Block方式，使调用相关函数简洁明了。 设备作为Central端和Peripheral端都有封装。 采用工厂模式和Block结合使得初始化和函数调用更容易。 ##Introduce类名 | 作用及用法—– | —–ZHBLECentral | 设备作为Central端的相关属性和操作例如:初始化Central,扫描,连接,检索设备等。ZHBLEPeripheral | 对Peripheral端的相关操作例如:发现服务和特征,监听，读写等操作。ZHBLEPeripheralManager | 设备作为Peripheral端时的相关操作例如:CBPeripheralManager的初始化,广播,添加服务，发送数据等。ZHBLEStoredPeripherals | 设备本地缓存相关操作ZHBLEManager | 快捷访问最近连接的设备ZHBLEBlocks | 所有Block定义 UsageCocoaPods (recommended)pod ‘ZHBLE’, ‘~&gt; 0.1.5’ Central123456789101112131415161718192021#import &quot;ZHBLE.h&quot;self.central = [ZHBLECentral sharedZHBLECentral];//扫描[self.central scanPeripheralWithServices:uuids options:@&#123;CBCentralManagerScanOptionAllowDuplicatesKey: @(YES)&#125; onUpdated:^(ZHBLEPeripheral *peripheral,NSDictionary *data)&#123; if (peripheral) &#123; //Do Something &#125; &#125;];//连接[self.central connectPeripheral:peripheral options:nil onFinished:^(ZHBLEPeripheral *peripheral, NSError *error)&#123;&#125;onDisconnected:^(ZHBLEPeripheral *peripheral, NSError *error)&#123; &#125;); &#125;]; Peripheral12345678910111213141516171819#import &quot;ZHBLE.h&quot;self.peripheralManager = [ZHBLEPeripheralManager sharedZHBLEPeripheralManager];//广播 CBUUID *temUUID = [CBUUID UUIDWithString:@&quot;902DD287-69BE-4ADD-AACF-AA3C24D83B66&quot;]; NSArray *temUUIDArray = [NSArray arrayWithObjects:temUUID, nil]; NSDictionary *temServiceDic = @&#123;CBAdvertisementDataServiceUUIDsKey:temUUIDArray&#125;; [self.peripheralManager startAdvertising:temServiceDic onStarted:^(NSError *error)&#123; &#125;];//添加服务[self.peripheralManager addService:_transferService onFinish:^(CBService *service,NSError *error)&#123; &#125;];]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[一个免费的开源聊天UI组件ZHChat]]></title>
      <url>%2F2016%2F08%2F03%2F%E4%B8%80%E4%B8%AA%E5%85%8D%E8%B4%B9%E7%9A%84%E5%BC%80%E6%BA%90%E8%81%8A%E5%A4%A9UI%E7%BB%84%E4%BB%B6ZHChat%2F</url>
      <content type="text"><![CDATA[ZHChat is a free open source chat UI components, support for sending voice, pictures, words, expressions, location, video messages. ZHChat can help developers to quickly integrate IM service, easy chat, provides totally free licensing agreement, support for secondary development. Welcome to pull Request. ##Features Interface to imitate Apple with a messaging application interface. Contains text, pictures, voice, location, sends a video message features. Excludes chat interface is based on a UITableView, easier to understand the entire UI framework。 Design GoalsEasy integrated chat feature. Requirements iOS 7.0+ ARC UsageCocoaPods (recommended)pod ‘ZHChat’, ‘~&gt; 0.1.7’ Getting started guide for ZHChat 1#import &lt;ZHChat/ZHCMessages.h&gt; // import all the things Demo Project There’s a sweet demo project: ‘ZHChat.xcworkspace’ Run ‘pod install’ first Customizing The demo project is well-commented. Please use this as a guide. View Controller Subclass ZHCMessagesViewController. Implement the required methods in the ZHCMessagesTableViewDataSource protocol. Implement the required methods in the ZHCMessagesTableViewDelegate protocol. Implement the required methods in the ZHCMessagesMoreViewDelegate protocol. Implement the required methods in the ZHCMessagesMoreViewDataSource protocol. Implement the required methods in the ZHCEmojiViewDelegate protocol. Implement the required methods in the ZHCMessagesInputToolbarDelegate protocol. Set your senderId and senderDisplayName. These properties correspond to the methods found in ZHCMessageData and determine which messages are incoming or outgoing. Avatar Model Your avatar model objects should conform to the ZHCMessageBubbleImageDataSource protocol. However, you may use the provided ZHCMessagesAvatarImage class. Also see ZHCMessagesAvatarImageFactory for easily generating custom avatars. Message Bubble Model Your message bubble model objects should conform to the ZHCMessageAvatarImageDataSource protocol. However, you may use the provided ZHCMessagesAvatarImage class. Also see ZHCMessagesBubbleImageFactory and UIImage+ZHCMessages for easily generating custom bubbles. Message Model Your message model objects should conform to the ZHCMessageData protocol. However, you may use the provided ZHCMessage class. Media Attachment Model Your media attachment model objects should conform to the ZHCMessageMediaData protocol. However,you may use the provided classes: ZHCAudioMediaItem, ZHCLocationMediaItem, ZHCPhotoMediaItem. Creating your own custom media items is easy! Simply follow the pattern used by the built-in media types. Also see ZHCMessagesMediaPlaceholderView for masking your custom media views as message bubbles. More Module You can see ZHCMessagesMoreView . Implement the required methods in the ZHCMessagesMoreViewDelegate protocol. Implement the required methods in the ZHCMessagesMoreViewDataSource protocol. Audio Module You can see ZHCMessagesVoiceRecorder,ZHCMessagesAudioProgressHUD . ZHCMessagesAudioProgressHUD is a recording voice animation view. ZHCMessagesVoiceRecorder is recorder. It implement the required methods in the ZHCMessagesVoiceDelegate protocol. Emoji Module You can see ZHCMessagesEmojiView . Implement the required methods in the ZHCEmojiViewDelegate protocol. The emoji resource in ZHCEmojiList.plist.]]></content>
    </entry>

    
  
  
</search>
